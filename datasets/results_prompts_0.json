[
  {
    "tool_name": "detect_object",
    "description": "Checks if the object is detected and returns True if detected, and False otherwise.",
    "parameters": {
      "object_name": [
        "string"
      ]
    },
    "use_cases": [
      {
        "user_request": "Is there a chair in the room?",
        "command": "detect_object('chair')",
        "return_description": "Returns True if the object is visible, and False otherwise."
      }
    ],
    "dataset": [
      {
        "user_request": "Is the door open?",
        "command": "detect_object('door')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "Is there a person in the room?",
        "command": "detect_object('person')",
        "rouge_score": 0.8571428521428571
      },
      {
        "user_request": "Is the light on?",
        "command": "detect_object('light')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "Is the stove turned on?",
        "command": "detect_object('stove')",
        "rouge_score": 0.33333332847222225
      },
      {
        "user_request": "Is the sink empty?",
        "command": "detect_object('sink')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "Is the trash can full?",
        "command": "detect_object('trash can')",
        "rouge_score": 0.33333332847222225
      },
      {
        "user_request": "Is the table clear?",
        "command": "detect_object('table')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "Is the chair pushed in?",
        "command": "detect_object('chair')",
        "rouge_score": 0.33333332847222225
      },
      {
        "user_request": "Is the book on the shelf?",
        "command": "detect_object('book')",
        "rouge_score": 0.33333332847222225
      },
      {
        "user_request": "Is the cup on the table?",
        "command": "detect_object('cup')",
        "rouge_score": 0.33333332847222225
      },
      {
        "user_request": "Is the TV on?",
        "command": "detect_object('TV')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "Is the window open?",
        "command": "detect_object('window')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "Is the bed made?",
        "command": "detect_object('bed')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "Is the toilet seat down?",
        "command": "detect_object('toilet seat')",
        "rouge_score": 0.33333332847222225
      },
      {
        "user_request": "Is the fridge door closed?",
        "command": "detect_object('fridge door')",
        "rouge_score": 0.33333332847222225
      },
      {
        "user_request": "Is the oven turned off?",
        "command": "detect_object('oven')",
        "rouge_score": 0.33333332847222225
      },
      {
        "user_request": "Is the car in the driveway?",
        "command": "detect_object('car')",
        "rouge_score": 0.499999995138889
      },
      {
        "user_request": "Is the mailbox empty?",
        "command": "detect_object('mailbox')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "Is the dog in the yard?",
        "command": "detect_object('dog')",
        "rouge_score": 0.499999995138889
      },
      {
        "user_request": "Is the cat on the couch?",
        "command": "detect_object('cat')",
        "rouge_score": 0.33333332847222225
      },
      {
        "user_request": "Is the plant watered?",
        "command": "detect_object('plant')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "Is the garage door closed?",
        "command": "detect_object('garage door')",
        "rouge_score": 0.33333332847222225
      }
    ]
  },
  {
    "tool_name": "enumerate_objects",
    "description": "Detects objects in the environment and returns a list of recognized objects.",
    "parameters": {},
    "use_cases": [
      {
        "user_request": "What objects are in the room?",
        "command": "enumerate_objects()",
        "return_description": "Returns a list of visible objects recognized by the assistant."
      }
    ],
    "dataset": [
      {
        "user_request": "List the objects in the room",
        "command": "enumerate_objects()",
        "rouge_score": 0.5454545404958678
      },
      {
        "user_request": "Tell me what's around me",
        "command": "enumerate_objects()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Describe the environment",
        "command": "enumerate_objects()",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Identify the items present",
        "command": "enumerate_objects()",
        "rouge_score": 0.1999999952000001
      },
      {
        "user_request": "Inventory the objects nearby",
        "command": "enumerate_objects()",
        "rouge_score": 0.1999999952000001
      },
      {
        "user_request": "What objects can you see?",
        "command": "enumerate_objects()",
        "rouge_score": 0.36363635867768596
      },
      {
        "user_request": "Tell me about the objects nearby",
        "command": "enumerate_objects()",
        "rouge_score": 0.16666666166666683
      },
      {
        "user_request": "What's in my surroundings?",
        "command": "enumerate_objects()",
        "rouge_score": 0.1999999952000001
      },
      {
        "user_request": "List the items around me",
        "command": "enumerate_objects()",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Describe the objects in the area",
        "command": "enumerate_objects()",
        "rouge_score": 0.5454545404958678
      },
      {
        "user_request": "Tell me about the objects in the room",
        "command": "enumerate_objects()",
        "rouge_score": 0.4615384565680473
      },
      {
        "user_request": "What objects are around me?",
        "command": "enumerate_objects()",
        "rouge_score": 0.5454545404958678
      },
      {
        "user_request": "Inform me about the objects nearby",
        "command": "enumerate_objects()",
        "rouge_score": 0.16666666166666683
      },
      {
        "user_request": "What objects can you detect?",
        "command": "enumerate_objects()",
        "rouge_score": 0.36363635867768596
      },
      {
        "user_request": "Tell me about the objects in my vicinity",
        "command": "enumerate_objects()",
        "rouge_score": 0.2857142808163266
      },
      {
        "user_request": "List the items in the area",
        "command": "enumerate_objects()",
        "rouge_score": 0.36363635867768596
      },
      {
        "user_request": "Describe the objects around me",
        "command": "enumerate_objects()",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "What objects are in the room?",
        "command": "enumerate_objects()",
        "rouge_score": 0.999999995
      },
      {
        "user_request": "Inform me about the objects in the environment",
        "command": "enumerate_objects()",
        "rouge_score": 0.4615384565680473
      },
      {
        "user_request": "Tell me about the objects nearby",
        "command": "enumerate_objects()",
        "rouge_score": 0.16666666166666683
      },
      {
        "user_request": "What objects can you see around me?",
        "command": "enumerate_objects()",
        "rouge_score": 0.3076923027218935
      },
      {
        "user_request": "List the objects in my surroundings",
        "command": "enumerate_objects()",
        "rouge_score": 0.3333333283333334
      }
    ]
  },
  {
    "tool_name": "navigation",
    "description": "Enables navigation to a specified destination.",
    "parameters": {
      "destination": [
        "string"
      ]
    },
    "use_cases": [
      {
        "user_request": "Lead me to the nearest shop.",
        "command": "navigation('nearest shop')",
        "return_description": "Proposes opening a navigation application to the chosen destination."
      }
    ],
    "dataset": [
      {
        "user_request": "Navigate to the nearest grocery store",
        "command": "navigation(destination: 'grocery store')",
        "rouge_score": 0.4999999950000001
      },
      {
        "user_request": "Take me to the park",
        "command": "navigation(destination: 'park')",
        "rouge_score": 0.5454545404958678
      },
      {
        "user_request": "Guide me to the bus stop",
        "command": "navigation(destination: 'bus stop')",
        "rouge_score": 0.4999999950000001
      },
      {
        "user_request": "Walk me to the library",
        "command": "navigation(destination: 'library')",
        "rouge_score": 0.5454545404958678
      },
      {
        "user_request": "Lead me to the post office",
        "command": "navigation(destination: 'post office')",
        "rouge_score": 0.6666666616666668
      },
      {
        "user_request": "Direct me to the pharmacy",
        "command": "navigation(destination: 'pharmacy')",
        "rouge_score": 0.5454545404958678
      },
      {
        "user_request": "Help me find the museum",
        "command": "navigation(destination: 'museum')",
        "rouge_score": 0.36363635867768596
      },
      {
        "user_request": "Assist me in reaching the theater",
        "command": "navigation(destination: 'theater')",
        "rouge_score": 0.3333333283333334
      },
      {
        "user_request": "Escort me to the coffee shop",
        "command": "navigation(destination: 'coffee shop')",
        "rouge_score": 0.6666666616666668
      },
      {
        "user_request": "Show me the way to the gym",
        "command": "navigation(destination: 'gym')",
        "rouge_score": 0.4999999950000001
      },
      {
        "user_request": "Guide me to the bank",
        "command": "navigation(destination: 'bank')",
        "rouge_score": 0.5454545404958678
      },
      {
        "user_request": "Walk me to the restaurant",
        "command": "navigation(destination: 'restaurant')",
        "rouge_score": 0.5454545404958678
      },
      {
        "user_request": "Lead me to the bookstore",
        "command": "navigation(destination: 'bookstore')",
        "rouge_score": 0.7272727223140496
      },
      {
        "user_request": "Direct me to the hospital",
        "command": "navigation(destination: 'hospital')",
        "rouge_score": 0.5454545404958678
      },
      {
        "user_request": "Help me find the shopping mall",
        "command": "navigation(destination: 'shopping mall')",
        "rouge_score": 0.3333333283333334
      },
      {
        "user_request": "Assist me in reaching the airport",
        "command": "navigation(destination: 'airport')",
        "rouge_score": 0.3333333283333334
      },
      {
        "user_request": "Escort me to the train station",
        "command": "navigation(destination: 'train station')",
        "rouge_score": 0.4999999950000001
      },
      {
        "user_request": "Show me the way to the cinema",
        "command": "navigation(destination: 'cinema')",
        "rouge_score": 0.4999999950000001
      },
      {
        "user_request": "Guide me to the community center",
        "command": "navigation(destination: 'community center')",
        "rouge_score": 0.4999999950000001
      },
      {
        "user_request": "Walk me to the art gallery",
        "command": "navigation(destination: 'art gallery')",
        "rouge_score": 0.4999999950000001
      },
      {
        "user_request": "Lead me to the sports complex",
        "command": "navigation(destination: 'sports complex')",
        "rouge_score": 0.6666666616666668
      },
      {
        "user_request": "Direct me to the city hall",
        "command": "navigation(destination: 'city hall')",
        "rouge_score": 0.4999999950000001
      }
    ]
  },
  {
    "tool_name": "position",
    "description": "Allows the user to know their current location.",
    "parameters": {},
    "use_cases": [
      {
        "user_request": "Where am I?",
        "command": "position()",
        "return_description": "Returns the current location of the user."
      }
    ],
    "dataset": [
      {
        "user_request": "What is my current location?",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me where I am.",
        "command": "position()",
        "rouge_score": 0.24999999531250006
      },
      {
        "user_request": "What is my position?",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Give me my location.",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me my position.",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is my current position?",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is my current location?",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is my position right now?",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Give me my current location.",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me my current position.",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is my current position?",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is my location right now?",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Give me my location.",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me my location.",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is my current location?",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is my position?",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Give me my position.",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me my position.",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is my current position?",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is my location?",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Give me my location.",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me my location.",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is my location right now?",
        "command": "position()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is my position right now?",
        "command": "position()",
        "rouge_score": 0.0
      }
    ]
  },
  {
    "tool_name": "add_face",
    "description": "Allows adding a face to the face recognition's database.",
    "parameters": {
      "person_name": [
        "string"
      ]
    },
    "use_cases": [
      {
        "user_request": "Add Mary in the known faces.",
        "command": "add_face('Mary')",
        "return_description": "Guides the user to optimally capture the face of the person to be added."
      }
    ],
    "dataset": [
      {
        "user_request": "Add John's face to the database",
        "command": "add_face(person_name='John')",
        "rouge_score": 0.3333333283333334
      },
      {
        "user_request": "Store Jane's face in the system",
        "command": "add_face(person_name='Jane')",
        "rouge_score": 0.3333333283333334
      },
      {
        "user_request": "Register Bob's face",
        "command": "add_face(person_name='Bob')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Save Sarah's face",
        "command": "add_face(person_name='Sarah')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Upload Tim's face",
        "command": "add_face(person_name='Tim')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Capture Lisa's face",
        "command": "add_face(person_name='Lisa')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Record Emily's face",
        "command": "add_face(person_name='Emily')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Add David's face",
        "command": "add_face(person_name='David')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Store Michael's face",
        "command": "add_face(person_name='Michael')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Register Rachel's face",
        "command": "add_face(person_name='Rachel')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Save Daniel's face",
        "command": "add_face(person_name='Daniel')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Upload Jennifer's face",
        "command": "add_face(person_name='Jennifer')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Capture Chris's face",
        "command": "add_face(person_name='Chris')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Record Elizabeth's face",
        "command": "add_face(person_name='Elizabeth')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Add Mark's face",
        "command": "add_face(person_name='Mark')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Store Maria's face",
        "command": "add_face(person_name='Maria')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Register Tom's face",
        "command": "add_face(person_name='Tom')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Save Olivia's face",
        "command": "add_face(person_name='Olivia')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Upload Jack's face",
        "command": "add_face(person_name='Jack')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Capture Emma's face",
        "command": "add_face(person_name='Emma')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Record Matthew's face",
        "command": "add_face(person_name='Matthew')",
        "rouge_score": 0.0
      }
    ]
  },
  {
    "tool_name": "remove_face",
    "description": "Allows removing a face to the face recognition's database.",
    "parameters": {
      "person_name": [
        "string"
      ]
    },
    "use_cases": [
      {
        "user_request": "Remove Joseph from the known faces.",
        "command": "remove_face('Joseph')",
        "return_description": "user_requests confirmation and, if unsure, enumerates possible profiles."
      }
    ],
    "dataset": [
      {
        "user_request": "Remove John's face from the database",
        "command": "remove_face(person_name='John')",
        "rouge_score": 0.4999999950000001
      },
      {
        "user_request": "Delete Jane's face",
        "command": "remove_face(person_name='Jane')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Erase Tom's face",
        "command": "remove_face(person_name='Tom')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Take out Sarah's face",
        "command": "remove_face(person_name='Sarah')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Remove Bob's face",
        "command": "remove_face(person_name='Bob')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Delete Emily's face",
        "command": "remove_face(person_name='Emily')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Erase David's face",
        "command": "remove_face(person_name='David')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Take out Lisa's face",
        "command": "remove_face(person_name='Lisa')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Remove Michael's face",
        "command": "remove_face(person_name='Michael')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Delete Olivia's face",
        "command": "remove_face(person_name='Olivia')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Erase Jack's face",
        "command": "remove_face(person_name='Jack')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Take out Sophia's face",
        "command": "remove_face(person_name='Sophia')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Remove Alex's face",
        "command": "remove_face(person_name='Alex')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Delete Amanda's face",
        "command": "remove_face(person_name='Amanda')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Erase James's face",
        "command": "remove_face(person_name='James')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Take out Jennifer's face",
        "command": "remove_face(person_name='Jennifer')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Remove Tim's face",
        "command": "remove_face(person_name='Tim')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Delete Jessica's face",
        "command": "remove_face(person_name='Jessica')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Erase Matthew's face",
        "command": "remove_face(person_name='Matthew')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Take out Elizabeth's face",
        "command": "remove_face(person_name='Elizabeth')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Remove Daniel's face",
        "command": "remove_face(person_name='Daniel')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Delete Laura's face",
        "command": "remove_face(person_name='Laura')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Erase Charles's face",
        "command": "remove_face(person_name='Charles')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Take out Katherine's face",
        "command": "remove_face(person_name='Katherine')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Remove William's face",
        "command": "remove_face(person_name='William')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Delete Catherine's face",
        "command": "remove_face(person_name='Catherine')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Erase Richard's face",
        "command": "remove_face(person_name='Richard')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Take out Maria's face",
        "command": "remove_face(person_name='Maria')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Remove Joseph's face",
        "command": "remove_face(person_name='Joseph')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Delete Rebecca's face",
        "command": "remove_face(person_name='Rebecca')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Erase Andrew's face",
        "command": "remove_face(person_name='Andrew')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Take out Margaret's face",
        "command": "remove_face(person_name='Margaret')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Remove Rachel's face",
        "command": "remove_face(person_name='Rachel')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Delete Anthony's face",
        "command": "remove_face(person_name='Anthony')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Erase Mary's face",
        "command": "remove_face(person_name='Mary')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Take out Steven's face",
        "command": "remove_face(person_name='Steven')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Remove Barbara's face",
        "command": "remove_face(person_name='Barbara')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Delete Frank's face",
        "command": "remove_face(person_name='Frank')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Erase Nancy's face",
        "command": "remove_face(person_name='Nancy')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Take out Jason's face",
        "command": "remove_face(person_name='Jason')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Remove Patricia's face",
        "command": "remove_face(person_name='Patricia')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Delete Robert's face",
        "command": "remove_face(person_name='Robert')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Erase Melissa's face",
        "command": "remove_face(person_name='Melissa')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Take out Brian's face",
        "command": "remove_face(person_name='Brian')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Remove Donna's face",
        "command": "remove_face(person_name='Donna')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Delete Ronald's face",
        "command": "remove_face(person_name='Ronald')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Erase Dorothy's face",
        "command": "remove_face(person_name='Dorothy')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Take out George's face",
        "command": "remove_face(person_name='George')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Remove Helen's face",
        "command": "remove_face(person_name='Helen')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Delete Harold's face",
        "command": "remove_face(person_name='Harold')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Erase Sandra's face",
        "command": "remove_face(person_name='Sandra')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Take out Paul's face",
        "command": "remove_face(person_name='Paul')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Remove Carol's face",
        "command": "remove_face(person_name='Carol')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Delete Steven's face",
        "command": "remove_face(person_name='Steven')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Erase Virginia's face",
        "command": "remove_face(person_name='Virginia')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Take out Edward's face",
        "command": "remove_face(person_name='Edward')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Remove Josephine's face",
        "command": "remove_face(person_name='Josephine')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Delete Walter's face",
        "command": "remove_face(person_name='Walter')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Erase Judy's face",
        "command": "remove_face(person_name='Judy')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Take out Norman's face",
        "command": "remove_face(person_name='Norman')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Remove Diane's face",
        "command": "remove_face(person_name='Diane')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Delete Sharon's face",
        "command": "remove_face(person_name='Sharon')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Erase Mildred's face",
        "command": "remove_face(person_name='Mildred')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Take out Benjamin's face",
        "command": "remove_face(person_name='Benjamin')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Remove Ruth's face",
        "command": "remove_face(person_name='Ruth')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Delete Gloria's face",
        "command": "remove_face(person_name='Gloria')",
        "rouge_score": 0.0
      }
    ]
  },
  {
    "tool_name": "look_for_face",
    "description": "Allows looking for a face from the face recognition's database.",
    "parameters": {
      "person_name": [
        "string"
      ]
    },
    "use_cases": [
      {
        "user_request": "Is Mary present?",
        "command": "look_for_face('Mary')",
        "return_description": "Responds and, if the person is present, offers to locate them."
      }
    ],
    "dataset": [
      {
        "user_request": "Find the face of John Doe",
        "command": "look_for_face(person_name='John Doe')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Locate the face of Jane Smith",
        "command": "look_for_face(person_name='Jane Smith')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Search for the face of Tom Jones",
        "command": "look_for_face(person_name='Tom Jones')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Identify the face of Sarah Johnson",
        "command": "look_for_face(person_name='Sarah Johnson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Retrieve the face of Michael Thompson",
        "command": "look_for_face(person_name='Michael Thompson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Discover the face of Emily Wilson",
        "command": "look_for_face(person_name='Emily Wilson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Recognize the face of David Miller",
        "command": "look_for_face(person_name='David Miller')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Detect the face of Rachel Taylor",
        "command": "look_for_face(person_name='Rachel Taylor')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Seek the face of Robert Brown",
        "command": "look_for_face(person_name='Robert Brown')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Uncover the face of Laura Green",
        "command": "look_for_face(person_name='Laura Green')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Examine the face of Paul Adams",
        "command": "look_for_face(person_name='Paul Adams')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Explore the face of Elizabeth Davis",
        "command": "look_for_face(person_name='Elizabeth Davis')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Analyze the face of James Wilson",
        "command": "look_for_face(person_name='James Wilson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Investigate the face of Jennifer Lee",
        "command": "look_for_face(person_name='Jennifer Lee')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Inspect the face of Timothy Johnson",
        "command": "look_for_face(person_name='Timothy Johnson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Scrutinize the face of Rebecca Thompson",
        "command": "look_for_face(person_name='Rebecca Thompson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Survey the face of Andrew Miller",
        "command": "look_for_face(person_name='Andrew Miller')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Study the face of Mary Taylor",
        "command": "look_for_face(person_name='Mary Taylor')",
        "rouge_score": 0.22222221777777784
      },
      {
        "user_request": "Observe the face of Joseph Brown",
        "command": "look_for_face(person_name='Joseph Brown')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Peruse the face of Lisa Green",
        "command": "look_for_face(person_name='Lisa Green')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Examine the face of Anthony Adams",
        "command": "look_for_face(person_name='Anthony Adams')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Explore the face of Margaret Davis",
        "command": "look_for_face(person_name='Margaret Davis')",
        "rouge_score": 0.0
      }
    ]
  },
  {
    "tool_name": "enumerate_individuals",
    "description": "Allows 'enumerating' at a given instant the name of all the recognized persons present in the face recognition's database.",
    "parameters": {},
    "use_cases": [
      {
        "user_request": "Who is present?",
        "command": "enumerate_individuals()",
        "return_description": "Returns a list of present individuals based on appearance order."
      }
    ],
    "dataset": [
      {
        "user_request": "List all the people in the database",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Show me the names of everyone in the system",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me who is in the database right now",
        "command": "enumerate_individuals()",
        "rouge_score": 0.16666666291666676
      },
      {
        "user_request": "Display the names of all recognized persons",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Provide a list of people the system knows",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Give me the names of everyone the system can identify",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Show me the list of people the system recognizes",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the names of all the people the system has seen",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Display the list of people the system has encountered",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Provide the names of everyone the system has met",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Show me the list of people the system is familiar with",
        "command": "enumerate_individuals()",
        "rouge_score": 0.15384615029585808
      },
      {
        "user_request": "Tell me the names of all the people the system knows about",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Display the list of people the system has seen before",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Provide the names of everyone the system has come across",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Show me the list of people the system has encountered before",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the names of all the people the system has recognized",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Display the list of people the system has met before",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Provide the names of everyone the system has come across before",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Show me the list of people the system has seen in the past",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the names of all the people the system has encountered before",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Display the list of people the system has recognized in the past",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Provide the names of everyone the system has met before",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      },
      {
        "user_request": "Show me the list of people the system has seen before",
        "command": "enumerate_individuals()",
        "rouge_score": 0.0
      }
    ]
  },
  {
    "tool_name": "age_estimation",
    "description": "Allows estimating the age from a face present in the face recognition's database.",
    "parameters": {
      "person_name": [
        "string"
      ]
    },
    "use_cases": [
      {
        "user_request": "What is Bob's age?",
        "command": "age_estimation('Bob')",
        "return_description": "Returns the estimated age of the person (only if in the assistant's database)."
      }
    ],
    "dataset": [
      {
        "user_request": "What is the age of John Doe?",
        "command": "age_estimation(person_name='John Doe')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "How old is Jane Smith?",
        "command": "age_estimation(person_name='Jane Smith')",
        "rouge_score": 0.22222221728395072
      },
      {
        "user_request": "Estimate the age of Tom Wilson.",
        "command": "age_estimation(person_name='Tom Wilson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the age of Sarah Johnson.",
        "command": "age_estimation(person_name='Sarah Johnson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the age of Michael Thompson?",
        "command": "age_estimation(person_name='Michael Thompson')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "How old is Emily Davis?",
        "command": "age_estimation(person_name='Emily Davis')",
        "rouge_score": 0.22222221728395072
      },
      {
        "user_request": "Estimate the age of David Miller.",
        "command": "age_estimation(person_name='David Miller')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the age of Rachel Taylor.",
        "command": "age_estimation(person_name='Rachel Taylor')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the age of Daniel Adams?",
        "command": "age_estimation(person_name='Daniel Adams')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "How old is Laura Brown?",
        "command": "age_estimation(person_name='Laura Brown')",
        "rouge_score": 0.22222221728395072
      },
      {
        "user_request": "Estimate the age of Jack Williams.",
        "command": "age_estimation(person_name='Jack Williams')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the age of Olivia Green.",
        "command": "age_estimation(person_name='Olivia Green')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the age of Matthew Robinson?",
        "command": "age_estimation(person_name='Matthew Robinson')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "How old is Elizabeth Scott?",
        "command": "age_estimation(person_name='Elizabeth Scott')",
        "rouge_score": 0.22222221728395072
      },
      {
        "user_request": "Estimate the age of James Anderson.",
        "command": "age_estimation(person_name='James Anderson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the age of Jennifer Lee.",
        "command": "age_estimation(person_name='Jennifer Lee')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the age of Robert Martinez?",
        "command": "age_estimation(person_name='Robert Martinez')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "How old is Lisa Stewart?",
        "command": "age_estimation(person_name='Lisa Stewart')",
        "rouge_score": 0.22222221728395072
      },
      {
        "user_request": "Estimate the age of Timothy Walker.",
        "command": "age_estimation(person_name='Timothy Walker')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the age of Rebecca White.",
        "command": "age_estimation(person_name='Rebecca White')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the age of Anthony Johnson?",
        "command": "age_estimation(person_name='Anthony Johnson')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "How old is Maria Hernandez?",
        "command": "age_estimation(person_name='Maria Hernandez')",
        "rouge_score": 0.22222221728395072
      },
      {
        "user_request": "Estimate the age of Eric Thompson.",
        "command": "age_estimation(person_name='Eric Thompson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the age of Jessica Wilson.",
        "command": "age_estimation(person_name='Jessica Wilson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the age of Christopher Martinez?",
        "command": "age_estimation(person_name='Christopher Martinez')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "How old is Amanda Lee?",
        "command": "age_estimation(person_name='Amanda Lee')",
        "rouge_score": 0.22222221728395072
      },
      {
        "user_request": "Estimate the age of Brian Davis.",
        "command": "age_estimation(person_name='Brian Davis')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the age of Sarah Thompson.",
        "command": "age_estimation(person_name='Sarah Thompson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the age of David Robinson?",
        "command": "age_estimation(person_name='David Robinson')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "How old is Emily Martinez?",
        "command": "age_estimation(person_name='Emily Martinez')",
        "rouge_score": 0.22222221728395072
      },
      {
        "user_request": "Estimate the age of Michael Johnson.",
        "command": "age_estimation(person_name='Michael Johnson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the age of Jennifer Wilson.",
        "command": "age_estimation(person_name='Jennifer Wilson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the age of Elizabeth Thompson?",
        "command": "age_estimation(person_name='Elizabeth Thompson')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "How old is John Wilson?",
        "command": "age_estimation(person_name='John Wilson')",
        "rouge_score": 0.22222221728395072
      },
      {
        "user_request": "Estimate the age of Sarah Martinez.",
        "command": "age_estimation(person_name='Sarah Martinez')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the age of Timothy Thompson.",
        "command": "age_estimation(person_name='Timothy Thompson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the age of Amanda Johnson?",
        "command": "age_estimation(person_name='Amanda Johnson')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "How old is Christopher Wilson?",
        "command": "age_estimation(person_name='Christopher Wilson')",
        "rouge_score": 0.22222221728395072
      },
      {
        "user_request": "Estimate the age of Elizabeth Davis.",
        "command": "age_estimation(person_name='Elizabeth Davis')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the age of Brian Wilson.",
        "command": "age_estimation(person_name='Brian Wilson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the age of Jennifer Martinez?",
        "command": "age_estimation(person_name='Jennifer Martinez')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "How old is Sarah Thompson?",
        "command": "age_estimation(person_name='Sarah Thompson')",
        "rouge_score": 0.22222221728395072
      },
      {
        "user_request": "Estimate the age of John Davis.",
        "command": "age_estimation(person_name='John Davis')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the age of Elizabeth Wilson.",
        "command": "age_estimation(person_name='Elizabeth Wilson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the age of Timothy Davis?",
        "command": "age_estimation(person_name='Timothy Davis')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "How old is Amanda Thompson?",
        "command": "age_estimation(person_name='Amanda Thompson')",
        "rouge_score": 0.22222221728395072
      },
      {
        "user_request": "Estimate the age of Christopher Davis.",
        "command": "age_estimation(person_name='Christopher Davis')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the age of Jennifer Davis.",
        "command": "age_estimation(person_name='Jennifer Davis')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the age of Brian Thompson?",
        "command": "age_estimation(person_name='Brian Thompson')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "How old is Elizabeth Thompson?",
        "command": "age_estimation(person_name='Elizabeth Thompson')",
        "rouge_score": 0.22222221728395072
      },
      {
        "user_request": "Estimate the age of John Davis.",
        "command": "age_estimation(person_name='John Davis')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the age of Elizabeth Thompson.",
        "command": "age_estimation(person_name='Elizabeth Thompson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the age of Timothy Thompson?",
        "command": "age_estimation(person_name='Timothy Thompson')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "How old is Amanda Thompson?",
        "command": "age_estimation(person_name='Amanda Thompson')",
        "rouge_score": 0.22222221728395072
      },
      {
        "user_request": "Estimate the age of Christopher Thompson.",
        "command": "age_estimation(person_name='Christopher Thompson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the age of Jennifer Thompson.",
        "command": "age_estimation(person_name='Jennifer Thompson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the age of Brian Thompson?",
        "command": "age_estimation(person_name='Brian Thompson')",
        "rouge_score": 0.36363635900826446
      },
      {
        "user_request": "How old is Elizabeth Thompson?",
        "command": "age_estimation(person_name='Elizabeth Thompson')",
        "rouge_score": 0.22222221728395072
      }
    ]
  },
  {
    "tool_name": "gender_estimation",
    "description": "Allows estimating the gender from a face present in the face recognition's database.",
    "parameters": {
      "person_name": [
        "string"
      ]
    },
    "use_cases": [
      {
        "user_request": "What is Bill's gender?",
        "command": "gender_estimation('Bill')",
        "return_description": "Returns the estimated age or gender of the person (only if in the assistant's database)."
      }
    ],
    "dataset": [
      {
        "user_request": "What is the gender of the person with the name John Doe?",
        "command": "gender_estimation(person_name='John Doe')",
        "rouge_score": 0.2857142816326531
      },
      {
        "user_request": "Can you tell me the gender of Jane Smith?",
        "command": "gender_estimation(person_name='Jane Smith')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Determine the gender of the person named Tom Johnson.",
        "command": "gender_estimation(person_name='Tom Johnson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Please find out the gender of Sarah Williams.",
        "command": "gender_estimation(person_name='Sarah Williams')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the gender of the person with the name Michael Brown.",
        "command": "gender_estimation(person_name='Michael Brown')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the gender of the person named Emily Thompson?",
        "command": "gender_estimation(person_name='Emily Thompson')",
        "rouge_score": 0.3076923034319527
      },
      {
        "user_request": "Can you determine the gender of David Lee?",
        "command": "gender_estimation(person_name='David Lee')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Please find out the gender of the person named Lisa Adams.",
        "command": "gender_estimation(person_name='Lisa Adams')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the gender of the person with the name Mark Taylor.",
        "command": "gender_estimation(person_name='Mark Taylor')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the gender of the person named Rachel Davis?",
        "command": "gender_estimation(person_name='Rachel Davis')",
        "rouge_score": 0.3076923034319527
      },
      {
        "user_request": "Can you tell me the gender of John Smith?",
        "command": "gender_estimation(person_name='John Smith')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Determine the gender of the person named Sarah Johnson.",
        "command": "gender_estimation(person_name='Sarah Johnson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Please find out the gender of Tom Williams.",
        "command": "gender_estimation(person_name='Tom Williams')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the gender of the person with the name Emily Brown.",
        "command": "gender_estimation(person_name='Emily Brown')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the gender of the person named David Thompson?",
        "command": "gender_estimation(person_name='David Thompson')",
        "rouge_score": 0.3076923034319527
      },
      {
        "user_request": "Can you determine the gender of Lisa Lee?",
        "command": "gender_estimation(person_name='Lisa Lee')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Please find out the gender of the person named Mark Adams.",
        "command": "gender_estimation(person_name='Mark Adams')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the gender of the person with the name Rachel Taylor.",
        "command": "gender_estimation(person_name='Rachel Taylor')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the gender of the person named John Davis?",
        "command": "gender_estimation(person_name='John Davis')",
        "rouge_score": 0.3076923034319527
      },
      {
        "user_request": "Can you tell me the gender of Jane Smith?",
        "command": "gender_estimation(person_name='Jane Smith')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Determine the gender of the person named Tom Johnson.",
        "command": "gender_estimation(person_name='Tom Johnson')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Please find out the gender of Sarah Williams.",
        "command": "gender_estimation(person_name='Sarah Williams')",
        "rouge_score": 0.0
      },
      {
        "user_request": "Tell me the gender of the person with the name Michael Brown.",
        "command": "gender_estimation(person_name='Michael Brown')",
        "rouge_score": 0.0
      }
    ]
  },
  {
    "tool_name": "emotion_estimation",
    "description": "Allows estimating the emotion from a face present in the face recognition's database.",
    "parameters": {
      "person_name": [
        "string"
      ]
    },
    "use_cases": [
      {
        "user_request": "In what mood is Alice?",
        "command": "emotion_estimation('Alice')",
        "return_description": "Returns the estimated age or gender of the person (only if in the assistant's database)."
      }
    ],
    "dataset": [
      {
        "user_request": "What is the emotion of John?",
        "command": "emotion_estimation(person_name: 'John')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Tell me the emotion of Jane.",
        "command": "emotion_estimation(person_name: 'Jane')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Tom?",
        "command": "emotion_estimation(person_name: 'Tom')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Can you tell me the emotion of Sarah?",
        "command": "emotion_estimation(person_name: 'Sarah')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Michael?",
        "command": "emotion_estimation(person_name: 'Michael')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Tell me the emotion of Emily.",
        "command": "emotion_estimation(person_name: 'Emily')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of David?",
        "command": "emotion_estimation(person_name: 'David')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Can you tell me the emotion of Lisa?",
        "command": "emotion_estimation(person_name: 'Lisa')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Jack?",
        "command": "emotion_estimation(person_name: 'Jack')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Tell me the emotion of Olivia.",
        "command": "emotion_estimation(person_name: 'Olivia')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Alex?",
        "command": "emotion_estimation(person_name: 'Alex')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Can you tell me the emotion of Sophia?",
        "command": "emotion_estimation(person_name: 'Sophia')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Matthew?",
        "command": "emotion_estimation(person_name: 'Matthew')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Tell me the emotion of Elizabeth.",
        "command": "emotion_estimation(person_name: 'Elizabeth')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Daniel?",
        "command": "emotion_estimation(person_name: 'Daniel')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Can you tell me the emotion of Jessica?",
        "command": "emotion_estimation(person_name: 'Jessica')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Christopher?",
        "command": "emotion_estimation(person_name: 'Christopher')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Tell me the emotion of Jennifer.",
        "command": "emotion_estimation(person_name: 'Jennifer')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Andrew?",
        "command": "emotion_estimation(person_name: 'Andrew')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Can you tell me the emotion of Victoria?",
        "command": "emotion_estimation(person_name: 'Victoria')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Benjamin?",
        "command": "emotion_estimation(person_name: 'Benjamin')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Tell me the emotion of Katherine.",
        "command": "emotion_estimation(person_name: 'Katherine')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Samuel?",
        "command": "emotion_estimation(person_name: 'Samuel')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Can you tell me the emotion of Rebecca?",
        "command": "emotion_estimation(person_name: 'Rebecca')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Joshua?",
        "command": "emotion_estimation(person_name: 'Joshua')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Tell me the emotion of Gabrielle.",
        "command": "emotion_estimation(person_name: 'Gabrielle')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Anthony?",
        "command": "emotion_estimation(person_name: 'Anthony')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Can you tell me the emotion of Isabella?",
        "command": "emotion_estimation(person_name: 'Isabella')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of William?",
        "command": "emotion_estimation(person_name: 'William')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Tell me the emotion of Lauren.",
        "command": "emotion_estimation(person_name: 'Lauren')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Eric?",
        "command": "emotion_estimation(person_name: 'Eric')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Can you tell me the emotion of Rachel?",
        "command": "emotion_estimation(person_name: 'Rachel')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Joseph?",
        "command": "emotion_estimation(person_name: 'Joseph')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Tell me the emotion of Madison.",
        "command": "emotion_estimation(person_name: 'Madison')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Aaron?",
        "command": "emotion_estimation(person_name: 'Aaron')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Can you tell me the emotion of Emily?",
        "command": "emotion_estimation(person_name: 'Emily')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Ryan?",
        "command": "emotion_estimation(person_name: 'Ryan')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Tell me the emotion of Taylor.",
        "command": "emotion_estimation(person_name: 'Taylor')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Timothy?",
        "command": "emotion_estimation(person_name: 'Timothy')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Can you tell me the emotion of Megan?",
        "command": "emotion_estimation(person_name: 'Megan')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Tyler?",
        "command": "emotion_estimation(person_name: 'Tyler')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Tell me the emotion of Elizabeth.",
        "command": "emotion_estimation(person_name: 'Elizabeth')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Jason?",
        "command": "emotion_estimation(person_name: 'Jason')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Can you tell me the emotion of Grace?",
        "command": "emotion_estimation(person_name: 'Grace')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Nicholas?",
        "command": "emotion_estimation(person_name: 'Nicholas')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Tell me the emotion of Julia.",
        "command": "emotion_estimation(person_name: 'Julia')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Dylan?",
        "command": "emotion_estimation(person_name: 'Dylan')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Can you tell me the emotion of Chloe?",
        "command": "emotion_estimation(person_name: 'Chloe')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Zachary?",
        "command": "emotion_estimation(person_name: 'Zachary')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Tell me the emotion of Mia.",
        "command": "emotion_estimation(person_name: 'Mia')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Luke?",
        "command": "emotion_estimation(person_name: 'Luke')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Can you tell me the emotion of Hailey?",
        "command": "emotion_estimation(person_name: 'Hailey')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Jake?",
        "command": "emotion_estimation(person_name: 'Jake')",
        "rouge_score": 0.18181817685950424
      },
      {
        "user_request": "Tell me the emotion of Ava.",
        "command": "emotion_estimation(person_name: 'Ava')",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the emotion of Noah?",
        "command": "emotion_estimation(person_name: 'Noah')",
        "rouge_score": 0.18181817685950424
      }
    ]
  },
  {
    "tool_name": "colors",
    "description": "Recognizes the dominant color of objects in the environment.",
    "parameters": {
      "object_name": [
        "string"
      ]
    },
    "use_cases": [
      {
        "user_request": "What are the colors of the chair?",
        "command": "colors('chair')",
        "return_description": "Enumerates objects and indicates their colors."
      }
    ],
    "dataset": [
      {
        "user_request": "What is the dominant color of my shirt?",
        "command": "colors(object_name: 'shirt')",
        "rouge_score": 0.4285714236734694
      },
      {
        "user_request": "Can you tell me the main color of this flower?",
        "command": "colors(object_name: 'flower')",
        "rouge_score": 0.24999999531250006
      },
      {
        "user_request": "What color is the sky today?",
        "command": "colors(object_name: 'sky')",
        "rouge_score": 0.3333333283333334
      },
      {
        "user_request": "What is the primary color of this book cover?",
        "command": "colors(object_name: 'book cover')",
        "rouge_score": 0.39999999520000007
      },
      {
        "user_request": "Tell me the main color of this painting.",
        "command": "colors(object_name: 'painting')",
        "rouge_score": 0.2857142808163266
      },
      {
        "user_request": "What color is the wall in this room?",
        "command": "colors(object_name: 'wall')",
        "rouge_score": 0.2857142808163266
      },
      {
        "user_request": "Can you identify the dominant color of this carpet?",
        "command": "colors(object_name: 'carpet')",
        "rouge_score": 0.2666666618666667
      },
      {
        "user_request": "What is the main color of this tree?",
        "command": "colors(object_name: 'tree')",
        "rouge_score": 0.4285714236734694
      },
      {
        "user_request": "Tell me the primary color of this tablecloth.",
        "command": "colors(object_name: 'tablecloth')",
        "rouge_score": 0.2857142808163266
      },
      {
        "user_request": "What color is the ocean today?",
        "command": "colors(object_name: 'ocean')",
        "rouge_score": 0.3333333283333334
      },
      {
        "user_request": "Can you tell me the main color of this building?",
        "command": "colors(object_name: 'building')",
        "rouge_score": 0.24999999531250006
      },
      {
        "user_request": "What is the dominant color of this fruit?",
        "command": "colors(object_name: 'fruit')",
        "rouge_score": 0.4285714236734694
      },
      {
        "user_request": "Tell me the primary color of this couch.",
        "command": "colors(object_name: 'couch')",
        "rouge_score": 0.2857142808163266
      },
      {
        "user_request": "What color is the grass in this park?",
        "command": "colors(object_name: 'grass')",
        "rouge_score": 0.2857142808163266
      },
      {
        "user_request": "Can you identify the dominant color of this umbrella?",
        "command": "colors(object_name: 'umbrella')",
        "rouge_score": 0.2666666618666667
      },
      {
        "user_request": "What is the main color of this road?",
        "command": "colors(object_name: 'road')",
        "rouge_score": 0.4285714236734694
      },
      {
        "user_request": "Tell me the primary color of this bridge.",
        "command": "colors(object_name: 'bridge')",
        "rouge_score": 0.2857142808163266
      },
      {
        "user_request": "What color is the sunset today?",
        "command": "colors(object_name: 'sunset')",
        "rouge_score": 0.3333333283333334
      },
      {
        "user_request": "Can you tell me the main color of this tree trunk?",
        "command": "colors(object_name: 'tree trunk')",
        "rouge_score": 0.23529411307958487
      },
      {
        "user_request": "What is the dominant color of this bird?",
        "command": "colors(object_name: 'bird')",
        "rouge_score": 0.4285714236734694
      },
      {
        "user_request": "Tell me the primary color of this flowerpot.",
        "command": "colors(object_name: 'flowerpot')",
        "rouge_score": 0.2857142808163266
      }
    ]
  },
  {
    "tool_name": "object_color",
    "description": "Identify the dominant color of objects",
    "parameters": {
      "object_name": [
        "string"
      ]
    },
    "use_cases": [
      {
        "user_request": "What is the main color of the chair?",
        "command": "object_color('chair')",
        "return_description": "If the object is visible, returns the dominant color of the object."
      }
    ],
    "dataset": [
      {
        "user_request": "What is the color of my shirt?",
        "command": "object_color(object_name: 'shirt')",
        "rouge_score": 0.7142857092857143
      },
      {
        "user_request": "Can you tell me the color of my coffee mug?",
        "command": "object_color(object_name: 'coffee mug')",
        "rouge_score": 0.3529411716262976
      },
      {
        "user_request": "What color is my wallet?",
        "command": "object_color(object_name: 'wallet')",
        "rouge_score": 0.33333332847222225
      },
      {
        "user_request": "What is the dominant color of my socks?",
        "command": "object_color(object_name: 'socks')",
        "rouge_score": 0.6666666616888889
      },
      {
        "user_request": "Can you identify the color of my pants?",
        "command": "object_color(object_name: 'pants')",
        "rouge_score": 0.3999999950222222
      },
      {
        "user_request": "What color is my backpack?",
        "command": "object_color(object_name: 'backpack')",
        "rouge_score": 0.33333332847222225
      },
      {
        "user_request": "Can you tell me the color of my shoes?",
        "command": "object_color(object_name: 'shoes')",
        "rouge_score": 0.37499999507812504
      },
      {
        "user_request": "What is the color of my hair?",
        "command": "object_color(object_name: 'hair')",
        "rouge_score": 0.7142857092857143
      },
      {
        "user_request": "Can you identify the color of my eyes?",
        "command": "object_color(object_name: 'eyes')",
        "rouge_score": 0.3999999950222222
      },
      {
        "user_request": "What color is my book cover?",
        "command": "object_color(object_name: 'book cover')",
        "rouge_score": 0.3076923027218935
      },
      {
        "user_request": "Can you tell me the color of my phone case?",
        "command": "object_color(object_name: 'phone case')",
        "rouge_score": 0.3529411716262976
      },
      {
        "user_request": "What is the dominant color of my scarf?",
        "command": "object_color(object_name: 'scarf')",
        "rouge_score": 0.6666666616888889
      },
      {
        "user_request": "Can you identify the color of my watch?",
        "command": "object_color(object_name: 'watch')",
        "rouge_score": 0.3999999950222222
      },
      {
        "user_request": "What color is my umbrella?",
        "command": "object_color(object_name: 'umbrella')",
        "rouge_score": 0.33333332847222225
      },
      {
        "user_request": "Can you tell me the color of my glasses?",
        "command": "object_color(object_name: 'glasses')",
        "rouge_score": 0.37499999507812504
      },
      {
        "user_request": "What is the color of my hat?",
        "command": "object_color(object_name: 'hat')",
        "rouge_score": 0.7142857092857143
      },
      {
        "user_request": "Can you identify the color of my pen?",
        "command": "object_color(object_name: 'pen')",
        "rouge_score": 0.3999999950222222
      },
      {
        "user_request": "What color is my water bottle?",
        "command": "object_color(object_name: 'water bottle')",
        "rouge_score": 0.3076923027218935
      },
      {
        "user_request": "Can you tell me the color of my notebook?",
        "command": "object_color(object_name: 'notebook')",
        "rouge_score": 0.37499999507812504
      },
      {
        "user_request": "What is the dominant color of my wallet?",
        "command": "object_color(object_name: 'wallet')",
        "rouge_score": 0.6666666616888889
      },
      {
        "user_request": "Can you identify the color of my belt?",
        "command": "object_color(object_name: 'belt')",
        "rouge_score": 0.3999999950222222
      },
      {
        "user_request": "What color is my tie?",
        "command": "object_color(object_name: 'tie')",
        "rouge_score": 0.33333332847222225
      }
    ]
  },
  {
    "tool_name": "ocr",
    "description": "Reads text from objects.",
    "parameters": {
      "object_name": [
        "string"
      ]
    },
    "use_cases": [
      {
        "user_request": "Read the text on the box.",
        "command": "ocr('box')",
        "return_description": "Returns a vocal transcription of the text."
      }
    ],
    "dataset": [
      {
        "user_request": "Read the text on this image",
        "command": "ocr(object_name: 'image.jpg')",
        "rouge_score": 0.7272727223140496
      },
      {
        "user_request": "Extract text from this document",
        "command": "ocr(object_name: 'document.pdf')",
        "rouge_score": 0.19999999500000015
      },
      {
        "user_request": "Scan this paper for text",
        "command": "ocr(object_name: 'paper.png')",
        "rouge_score": 0.19999999500000015
      },
      {
        "user_request": "Recognize text in this video",
        "command": "ocr(object_name: 'video.mp4')",
        "rouge_score": 0.19999999500000015
      },
      {
        "user_request": "Identify text on this screen",
        "command": "ocr(object_name: 'screen.png')",
        "rouge_score": 0.3999999950000001
      },
      {
        "user_request": "Analyze text in this photo",
        "command": "ocr(object_name: 'photo.jpg')",
        "rouge_score": 0.19999999500000015
      },
      {
        "user_request": "Detect text on this receipt",
        "command": "ocr(object_name: 'receipt.jpg')",
        "rouge_score": 0.3999999950000001
      },
      {
        "user_request": "Retrieve text from this book",
        "command": "ocr(object_name: 'book.pdf')",
        "rouge_score": 0.19999999500000015
      },
      {
        "user_request": "Capture text from this menu",
        "command": "ocr(object_name: 'menu.png')",
        "rouge_score": 0.19999999500000015
      },
      {
        "user_request": "Transcribe text from this sign",
        "command": "ocr(object_name: 'sign.jpg')",
        "rouge_score": 0.19999999500000015
      },
      {
        "user_request": "Decode text on this poster",
        "command": "ocr(object_name: 'poster.jpg')",
        "rouge_score": 0.3999999950000001
      },
      {
        "user_request": "Interpret text in this magazine",
        "command": "ocr(object_name: 'magazine.pdf')",
        "rouge_score": 0.19999999500000015
      },
      {
        "user_request": "Extract text from this newspaper",
        "command": "ocr(object_name: 'newspaper.jpg')",
        "rouge_score": 0.19999999500000015
      },
      {
        "user_request": "Recognize text on this billboard",
        "command": "ocr(object_name: 'billboard.jpg')",
        "rouge_score": 0.3999999950000001
      },
      {
        "user_request": "Read text from this business card",
        "command": "ocr(object_name: 'business_card.jpg')",
        "rouge_score": 0.36363635867768596
      },
      {
        "user_request": "Retrieve text from this label",
        "command": "ocr(object_name: 'label.png')",
        "rouge_score": 0.19999999500000015
      },
      {
        "user_request": "Scan text from this brochure",
        "command": "ocr(object_name: 'brochure.pdf')",
        "rouge_score": 0.19999999500000015
      },
      {
        "user_request": "Analyze text on this certificate",
        "command": "ocr(object_name: 'certificate.jpg')",
        "rouge_score": 0.3999999950000001
      },
      {
        "user_request": "Capture text from this flyer",
        "command": "ocr(object_name: 'flyer.png')",
        "rouge_score": 0.19999999500000015
      },
      {
        "user_request": "Transcribe text from this receipt",
        "command": "ocr(object_name: 'receipt.jpg')",
        "rouge_score": 0.19999999500000015
      },
      {
        "user_request": "Decode text on this packaging",
        "command": "ocr(object_name: 'packaging.jpg')",
        "rouge_score": 0.3999999950000001
      },
      {
        "user_request": "Interpret text in this magazine",
        "command": "ocr(object_name: 'magazine.pdf')",
        "rouge_score": 0.19999999500000015
      }
    ]
  },
  {
    "tool_name": "ocr_objects",
    "description": "Returns a list of objects with text on them.",
    "parameters": {},
    "use_cases": [
      {
        "user_request": "Is there any text in the room?",
        "command": "ocr_objects()",
        "return_description": "Returns a list of objects with text."
      }
    ],
    "dataset": [
      {
        "user_request": "Read the text on the objects in the room",
        "command": "ocr_objects()",
        "rouge_score": 0.4285714235714286
      },
      {
        "user_request": "Identify objects with text in the room",
        "command": "ocr_objects()",
        "rouge_score": 0.4285714235714286
      },
      {
        "user_request": "Tell me about objects with text in the room",
        "command": "ocr_objects()",
        "rouge_score": 0.37499999507812504
      },
      {
        "user_request": "Describe objects with text in the room",
        "command": "ocr_objects()",
        "rouge_score": 0.4285714235714286
      },
      {
        "user_request": "List objects with text in the room",
        "command": "ocr_objects()",
        "rouge_score": 0.4285714235714286
      },
      {
        "user_request": "Announce objects with text in the room",
        "command": "ocr_objects()",
        "rouge_score": 0.4285714235714286
      },
      {
        "user_request": "Inform me about objects with text in the room",
        "command": "ocr_objects()",
        "rouge_score": 0.37499999507812504
      },
      {
        "user_request": "Report objects with text in the room",
        "command": "ocr_objects()",
        "rouge_score": 0.4285714235714286
      },
      {
        "user_request": "Tell me about objects with text",
        "command": "ocr_objects()",
        "rouge_score": 0.1538461488757398
      },
      {
        "user_request": "Describe objects with text",
        "command": "ocr_objects()",
        "rouge_score": 0.18181817719008275
      },
      {
        "user_request": "List objects with text",
        "command": "ocr_objects()",
        "rouge_score": 0.18181817719008275
      },
      {
        "user_request": "Announce objects with text",
        "command": "ocr_objects()",
        "rouge_score": 0.18181817719008275
      },
      {
        "user_request": "Inform me about objects with text",
        "command": "ocr_objects()",
        "rouge_score": 0.1538461488757398
      },
      {
        "user_request": "Report objects with text",
        "command": "ocr_objects()",
        "rouge_score": 0.18181817719008275
      },
      {
        "user_request": "Read the text on the objects",
        "command": "ocr_objects()",
        "rouge_score": 0.33333332847222225
      },
      {
        "user_request": "Identify objects with text",
        "command": "ocr_objects()",
        "rouge_score": 0.18181817719008275
      },
      {
        "user_request": "Tell me about objects with text",
        "command": "ocr_objects()",
        "rouge_score": 0.1538461488757398
      },
      {
        "user_request": "Describe objects with text",
        "command": "ocr_objects()",
        "rouge_score": 0.18181817719008275
      },
      {
        "user_request": "List objects with text",
        "command": "ocr_objects()",
        "rouge_score": 0.18181817719008275
      },
      {
        "user_request": "Announce objects with text",
        "command": "ocr_objects()",
        "rouge_score": 0.18181817719008275
      },
      {
        "user_request": "Inform me about objects with text",
        "command": "ocr_objects()",
        "rouge_score": 0.1538461488757398
      },
      {
        "user_request": "Report objects with text",
        "command": "ocr_objects()",
        "rouge_score": 0.18181817719008275
      }
    ]
  },
  {
    "tool_name": "money",
    "description": "Recognizes the value and currency of coins and banknotes. Returns a list of detected elements and the total amount.",
    "parameters": {},
    "use_cases": [
      {
        "user_request": "How much money is there?",
        "command": "money()",
        "return_description": "Returns a list of detected elements and the total amount."
      }
    ],
    "dataset": [
      {
        "user_request": "How much money do I have in my wallet?",
        "command": "money(wallet)",
        "rouge_score": 0.4285714239795918
      },
      {
        "user_request": "What is the total value of the coins in my pocket?",
        "command": "money(pocket)",
        "rouge_score": 0.13333332888888905
      },
      {
        "user_request": "Can you identify the currency of this banknote?",
        "command": "money(banknote)",
        "rouge_score": 0.0
      },
      {
        "user_request": "How many coins of a certain denomination do I have?",
        "command": "money(coins, denomination)",
        "rouge_score": 0.13333332888888905
      },
      {
        "user_request": "Tell me the value of this coin.",
        "command": "money(coin)",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the total amount of money in my piggy bank?",
        "command": "money(piggy_bank)",
        "rouge_score": 0.12499999570312517
      },
      {
        "user_request": "How much money is on this table?",
        "command": "money(table)",
        "rouge_score": 0.6666666618055556
      },
      {
        "user_request": "Can you identify the currency of this coin?",
        "command": "money(coin)",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the total value of the banknotes in my wallet?",
        "command": "money(wallet, banknotes)",
        "rouge_score": 0.13333332888888905
      },
      {
        "user_request": "How many coins of different denominations do I have?",
        "command": "money(coins, denominations)",
        "rouge_score": 0.14285713826530627
      },
      {
        "user_request": "What is the total amount of money in my coin collection?",
        "command": "money(coin_collection)",
        "rouge_score": 0.12499999570312517
      },
      {
        "user_request": "Can you identify the currency of this coin and banknote?",
        "command": "money(coin, banknote)",
        "rouge_score": 0.0
      },
      {
        "user_request": "How much money is in my cash register?",
        "command": "money(cash_register)",
        "rouge_score": 0.6153846106508877
      },
      {
        "user_request": "What is the total value of the coins and banknotes in my purse?",
        "command": "money(purse)",
        "rouge_score": 0.11764705467128042
      },
      {
        "user_request": "Can you identify the currency of this coin and tell me its value?",
        "command": "money(coin, value)",
        "rouge_score": 0.0
      },
      {
        "user_request": "How many coins of a certain denomination are in my coin collection?",
        "command": "money(coin_collection, denomination)",
        "rouge_score": 0.11764705467128042
      },
      {
        "user_request": "What is the total amount of money in my coin jar?",
        "command": "money(coin_jar)",
        "rouge_score": 0.12499999570312517
      },
      {
        "user_request": "Can you identify the currency of this coin and tell me how many I have?",
        "command": "money(coin, count)",
        "rouge_score": 0.0
      },
      {
        "user_request": "How much money is on my desk?",
        "command": "money(desk)",
        "rouge_score": 0.6666666618055556
      },
      {
        "user_request": "What is the total value of the coins and banknotes in my backpack?",
        "command": "money(backpack)",
        "rouge_score": 0.11764705467128042
      },
      {
        "user_request": "Can you identify the currency of this coin and tell me how many of a different denomination I have?",
        "command": "money(coin, denomination2, count)",
        "rouge_score": 0.0
      }
    ]
  },
  {
    "tool_name": "environment_description",
    "description": "Describes the environment.",
    "parameters": {},
    "use_cases": [
      {
        "user_request": "Describe the environment.",
        "command": "environment_description()",
        "return_description": "Provides a 'caption' regarding what the assistant sees or a list of visible objects for the assistant."
      }
    ],
    "dataset": [
      {
        "user_request": "Tell me about the environment.",
        "command": "environment_description()",
        "rouge_score": 0.49999999531250006
      },
      {
        "user_request": "Describe the room.",
        "command": "environment_description(room)",
        "rouge_score": 0.6666666616666668
      },
      {
        "user_request": "Tell me about the objects in the room.",
        "command": "environment_description(objects)",
        "rouge_score": 0.19999999580000008
      },
      {
        "user_request": "Describe the people in the room.",
        "command": "environment_description(people)",
        "rouge_score": 0.49999999531250006
      },
      {
        "user_request": "Tell me about the colors in the room.",
        "command": "environment_description(colors)",
        "rouge_score": 0.19999999580000008
      },
      {
        "user_request": "Describe the lighting in the room.",
        "command": "environment_description(lighting)",
        "rouge_score": 0.49999999531250006
      },
      {
        "user_request": "Tell me about the temperature in the room.",
        "command": "environment_description(temperature)",
        "rouge_score": 0.19999999580000008
      },
      {
        "user_request": "Describe the sounds in the room.",
        "command": "environment_description(sounds)",
        "rouge_score": 0.49999999531250006
      },
      {
        "user_request": "Tell me about the smells in the room.",
        "command": "environment_description(smells)",
        "rouge_score": 0.19999999580000008
      },
      {
        "user_request": "Describe the textures in the room.",
        "command": "environment_description(textures)",
        "rouge_score": 0.49999999531250006
      },
      {
        "user_request": "Tell me about the furniture in the room.",
        "command": "environment_description(furniture)",
        "rouge_score": 0.19999999580000008
      },
      {
        "user_request": "Describe the layout of the room.",
        "command": "environment_description(layout)",
        "rouge_score": 0.49999999531250006
      },
      {
        "user_request": "Tell me about the decorations in the room.",
        "command": "environment_description(decorations)",
        "rouge_score": 0.19999999580000008
      },
      {
        "user_request": "Describe the plants in the room.",
        "command": "environment_description(plants)",
        "rouge_score": 0.49999999531250006
      },
      {
        "user_request": "Tell me about the windows in the room.",
        "command": "environment_description(windows)",
        "rouge_score": 0.19999999580000008
      },
      {
        "user_request": "Describe the doors in the room.",
        "command": "environment_description(doors)",
        "rouge_score": 0.49999999531250006
      },
      {
        "user_request": "Tell me about the walls in the room.",
        "command": "environment_description(walls)",
        "rouge_score": 0.19999999580000008
      },
      {
        "user_request": "Describe the floor in the room.",
        "command": "environment_description(floor)",
        "rouge_score": 0.49999999531250006
      },
      {
        "user_request": "Tell me about the ceiling in the room.",
        "command": "environment_description(ceiling)",
        "rouge_score": 0.19999999580000008
      },
      {
        "user_request": "Describe the light sources in the room.",
        "command": "environment_description(light_sources)",
        "rouge_score": 0.44444444000000005
      },
      {
        "user_request": "Tell me about the objects on the walls.",
        "command": "environment_description(wall_objects)",
        "rouge_score": 0.19999999580000008
      },
      {
        "user_request": "Describe the objects on the floor.",
        "command": "environment_description(floor_objects)",
        "rouge_score": 0.49999999531250006
      }
    ]
  },
  {
    "tool_name": "environment_question",
    "description": "Answers questions about the environment.",
    "parameters": {},
    "use_cases": [
      {
        "user_request": "Am I in a garden?",
        "command": "environment_question('Am I in a garden?')",
        "return_description": "Responds to the question."
      }
    ],
    "dataset": [
      {
        "user_request": "What is the current temperature outside?",
        "command": "get_temperature()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the weather forecast for today?",
        "command": "get_weather_forecast(today)",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the air quality in my area?",
        "command": "get_air_quality()",
        "rouge_score": 0.1538461491124262
      },
      {
        "user_request": "Is it raining right now?",
        "command": "get_rain_status()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the pollen count today?",
        "command": "get_pollen_count(today)",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the UV index for today?",
        "command": "get_uv_index(today)",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the sunrise time for today?",
        "command": "get_sunrise_time(today)",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the sunset time for today?",
        "command": "get_sunset_time(today)",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the current humidity level?",
        "command": "get_humidity_level()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the wind speed right now?",
        "command": "get_wind_speed()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the wind direction right now?",
        "command": "get_wind_direction()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the barometric pressure right now?",
        "command": "get_barometric_pressure()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the visibility distance right now?",
        "command": "get_visibility_distance()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the dew point right now?",
        "command": "get_dew_point()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the heat index right now?",
        "command": "get_heat_index()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the current cloud cover?",
        "command": "get_cloud_cover()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the current moon phase?",
        "command": "get_moon_phase()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the current water temperature?",
        "command": "get_water_temperature()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the current soil temperature?",
        "command": "get_soil_temperature()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the current soil moisture?",
        "command": "get_soil_moisture()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the current leaf wetness?",
        "command": "get_leaf_wetness()",
        "rouge_score": 0.0
      },
      {
        "user_request": "What is the current evapotranspiration?",
        "command": "get_evapotranspiration()",
        "rouge_score": 0.0
      }
    ]
  }
]